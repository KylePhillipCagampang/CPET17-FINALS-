import Head from "next/head";
import { useState } from "react";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";
import styles from "../../styles/signin.module.css";
import Link from "next/link";

const signup = () => {
  const router = useRouter();
  const { status, data } = useSession();

  const [userInfo, setUserInfo] = useState({
    username: "",
    email: "",
    password: "",
    cpassword: "",
  });
  const [alert, setAlert] = useState("");

  const handleSubmit = async (e) => {
    // validate user
    e.preventDefault();

    let result = false;

    // password must be 8 characters minimum
    if (userInfo.password.length < 7) {
      result = true;
      setAlert("Minimum character for password is 8!");
    }

    // password and confirm password must be same
    if (userInfo.password !== userInfo.cpassword) {
      setAlert("Password not match!");
      result = true;
    }

    // username must be 6 characters minimum
    if (userInfo.username.length < 5) {
      setAlert("Minimum character for username is 6!");
      result = true;
    }

    if (result != true) {
      try {
        const res = await fetch("http://localhost:3002/api/users/check", {
          method: "POST",
          body: JSON.stringify({ userInfo }),
          headers: { "Content-Type": "application/json" },
        });

        const user = await res.json();

        // if user not registered yet, insert
        if (user.length == 0) {
          const res2 = await fetch("http://localhost:3002/api/users/insert", {
            method: "POST",
            body: JSON.stringify({ userInfo }),
            headers: { "Content-Type": "application/json" },
          });

          const user2 = await res2.json();

          if (user2) {
            window.alert("User is created.");
            router.push("/auth/signin");
          }
        } else {
          setAlert("Username or email already created!");
        }
      } catch (error) {
        console.log(error);
      }
    } else {
      console.log("not pushed");
    }
  };

  if (status === "authenticated") {
    router.replace("/");
  } else {
    return (
      <>
        <Head>
          <title>CPETCAM</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
        </Head>
        <main className={styles.signin_div}>
          <form
            className={styles.signin_form_div}
            action=""
            onSubmit={handleSubmit}
          >
            <img src="/Logo.svg" alt="" height={200} width={200} />
            <div className={styles.signin_form}>
            <div className={styles.input_text_div}>
              <span className={styles.input_span}>Username</span>
              <input
              className={styles.input_text}
              type="text"
              name="username"
              placeholder="Username"
              id=""
              onChange={(e) => {
                setUserInfo({ ...userInfo, username: e.target.value });
              }}
            />
              </div>
            <div className={styles.input_text_div}>
              <span className={styles.input_span}>Email</span>
              <input
              className={styles.input_text}
              type="email"
              name="email"
              id=""
              placeholder="Email"
              onChange={(e) => {
                setUserInfo({ ...userInfo, email: e.target.value });
              }}
            />
              </div>
            <div className={styles.input_text_div}>
              <span className={styles.input_span}>Password</span>
              <input
              className={styles.input_text}
              type="password"
              name="password"
              id=""
              placeholder="Password"
              onChange={(e) => {
                setUserInfo({ ...userInfo, password: e.target.value });
              }}
            />
              </div>
            <div className={styles.input_text_div}>
              <span className={styles.input_span}>Confirm Password</span>
              <input
              className={styles.input_text}
              type="password"
              name="password"
              id=""
              placeholder="Confirm password"
              onChange={(e) => {
                setUserInfo({ ...userInfo, cpassword: e.target.value });
              }}
            />
              </div>

           <div className={styles.cancel_signup}>
           <Link className={styles.signup_link} href="/auth/signin">
                Cancel
              </Link>
              <input
              className={styles.signup_btn}
              type="submit"
              value="Create account"
              name="login"
              id=""
            />
           </div>
            
           
 
</div>
            
          </form>
        </main>
      </>
    );
  }

  return <div>Loading</div>;
};

export default signup;
